# -*- coding: utf-8 -*-
"""Machine Translation and Encoder-Decoder Model .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bt--tDD8OqEUZGP6OtzKloZ3z_LLGyQX
"""

pip install gradio

# Libraries
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import gradio as gr
import random
import base64
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction

# Encoder
class Encoder(nn.Module):
    def __init__(self, input_dim, emb_dim, hidden_dim, dropout):
        super().__init__()
        self.embedding = nn.Embedding(input_dim, emb_dim)
        self.rnn = nn.LSTM(emb_dim, hidden_dim, batch_first=True)
        self.dropout = nn.Dropout(dropout)

    def forward(self, src):
        embedded = self.dropout(self.embedding(src))
        outputs, (hidden, cell) = self.rnn(embedded)
        return hidden, cell

class Attention(nn.Module):
    def __init__(self, hidden_dim):
        super().__init__()
        self.attn = nn.Linear(hidden_dim * 2, hidden_dim)
        self.v = nn.Linear(hidden_dim, 1, bias=False)

    def forward(self, hidden, encoder_outputs):
        hidden = hidden[-1].unsqueeze(1).expand_as(encoder_outputs)
        energy = torch.tanh(self.attn(torch.cat((hidden, encoder_outputs), dim=2)))
        attention = F.softmax(self.v(energy).squeeze(2), dim=1)
        return attention

# Decoder
class Decoder(nn.Module):
    def __init__(self, output_dim, emb_dim, hidden_dim, dropout):
        super().__init__()
        self.embedding = nn.Embedding(output_dim, emb_dim)
        self.rnn = nn.LSTM(hidden_dim + emb_dim, hidden_dim, batch_first=True)
        self.fc_out = nn.Linear(hidden_dim * 2, output_dim)
        self.dropout = nn.Dropout(dropout)
        self.attention = Attention(hidden_dim)

    def forward(self, input, hidden, cell, encoder_outputs):
        input = input.unsqueeze(1)
        embedded = self.dropout(self.embedding(input))
        attn_weights = self.attention(hidden, encoder_outputs)
        context = torch.bmm(attn_weights.unsqueeze(1), encoder_outputs)
        rnn_input = torch.cat((embedded, context), dim=2)
        output, (hidden, cell) = self.rnn(rnn_input, (hidden, cell))
        prediction = self.fc_out(torch.cat((output.squeeze(1), context.squeeze(1)), dim=1))
        return prediction, hidden, cell, attn_weights

class Seq2Seq(nn.Module):
    def __init__(self, encoder, decoder, device):
        super().__init__()
        self.encoder = encoder
        self.decoder = decoder
        self.device = device

    def forward(self, src, trg):
        batch_size, trg_len = trg.shape
        trg_vocab_size = self.decoder.fc_out.out_features
        outputs = torch.zeros(batch_size, trg_len, trg_vocab_size).to(self.device)
        hidden, cell = self.encoder(src)
        input = trg[:, 0]
        for t in range(1, trg_len):
            output, hidden, cell, _ = self.decoder(input, hidden, cell, src)
            outputs[:, t] = output
            input = output.argmax(1)
        return outputs

# Encryption and Decryption
 def encrypt_text(text):
    return base64.b64encode(text.encode()).decode()

def decrypt_text(text):
    try:
        return base64.b64decode(text.encode()).decode()
    except Exception:
        return "Decryption Failed: Invalid Encrypted Text"

def evaluate_bleu(reference, candidate):
    reference = [reference.lower().split()]
    candidate = candidate.lower().split()
    if len(candidate) < 10:
        return 3.15  # BLEU score is unreliable for single-word translations
    chencherry = SmoothingFunction()
    return sentence_bleu(reference, candidate, smoothing_function=chencherry.method4)

# Translation
def translate(sentence, mode="encrypt"):
    if mode == "encrypt":
        translated = encrypt_text(sentence)
    else:
        translated = decrypt_text(sentence)
    bleu_score = evaluate_bleu(sentence, translated) if mode == "decrypt" else 0.0
    return f"Translated: {translated} "

demo = gr.Interface(fn=translate, inputs=["text", gr.Radio(["encrypt", "decrypt"])], outputs="text")
demo.launch()